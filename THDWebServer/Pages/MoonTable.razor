@page "/moontable"
@attribute [Authorize(Roles = CustomAuthenticationStateProvider.ROLE_MOON_TABLE)]
@using ThunderED.Modules
@using ThunderED.Helpers
@using ThunderED.Thd
@using THDWebServer.Pages.Modals
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core
@inject ProtectedSessionStorage Store
@inject IModalService Modal
@inject NavigationManager Nav

@inject ThunderedDbContext dbContext

<div class="text-center pageHeader">
    @LM.Get("hrmMoonsPage")
</div>

<div class="container">
    <RadzenTabs Style="padding: 0;">
        <Tabs>
            @if (_hasViewAccess)
            {
                <RadzenTabsItem Text="@LM.Get("mtMoonsHeader")" Style="padding: 0;">
                    <div class="row">
                        <div style="margin-left: 10px;">
                            <button class='navButton2' @onclick="ImportMoonDataClick" style="width: 150px; margin-left: 10px;"><RadzenIcon Icon="system_update_alt" Style="font-size: 15px; vertical-align: text-top; " />@LM.Get("webButtonUploadScan")</button>
                        </div>
                    </div>
                    <RadzenDataGrid TItem="ThdMoonTableEntry" FilterMode="FilterMode.Simple"
                                    Count="@_countMoons"
                                    LoadData="@LoadMoonsGrid" @ref="_moonsGrid" Data="@_filteredMoonList"
                                    AllowFiltering="true" AllowSorting="true" AllowColumnResize="false" AllowGrouping="true"
                                    Style="height: 640px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    LogicalFilterOperator="LogicalFilterOperator.And"
                                    PageSize="100" AllowPaging="true"
                                    CellRender="MoonCellRender" Render="@OnMoonsRender">
                        <GroupHeaderTemplate>
                            @(context.Data.Key ?? ""), @(context.Data.Items.Cast<ThdMoonTableEntry>().FirstOrDefault()?.PlanetName) - @(context.Data.Items.Cast<ThdMoonTableEntry>().FirstOrDefault()?.SystemName)
                        </GroupHeaderTemplate>
                        <Columns>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="RegionName" Filterable="true" Sortable="true" FilterProperty="RegionName" SortProperty="RegionName"
                                                  Title="@LM.Get("mtColumnRegionName")">
                                <Template Context="order">
                                    <RadzenLabel Text="@order.RegionName"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="SystemName" Filterable="true" Sortable="true" FilterProperty="SystemName" SortProperty="SystemName"
                                                  Title="@LM.Get("mtColumnSystemName")">
                                <Template Context="order">
                                    <RadzenLabel Text="@order.SystemName"/>
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="MoonName" Filterable="true" Sortable="true" FilterProperty="MoonName" SortProperty="MoonName"
                                                  Title="@LM.Get("mtColumnMoonName")" Width="120px">
                                <Template Context="order">
                                    <RadzenLabel Text="@($"{order.PlanetName} - {order.MoonName}")"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="OreName" Filterable="true" Sortable="true"  SortProperty="OreName"
                                                  FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or"
                                                  Type="typeof(IEnumerable<string>)"
                                                  Title="@LM.Get("mtColumnOreName")" Width="180px" FilterValue="@_selectedOreNamesList">
                                <FilterTemplate>
                                    <RadzenDropDown @bind-Value=@_selectedOreNamesList Style="width:100%; margin: 8px 4px;"
                                                    Change=@OnOrenameFilterChange Data="@(_oreNamesList)" AllowClear="true" Multiple="true" />
                                </FilterTemplate>
                                <Template Context="order">
                                    <RadzenLabel Text="@order.OreName"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="OreQuantity" Filterable="true" Sortable="true" FilterProperty="OreQuantity" SortProperty="OreQuantity"
                                                  Title="@LM.Get("mtColumnOreQuantity")" Groupable="false" Width="80px">
                                <Template Context="order">
                                    <RadzenLabel Text="@($"{order.OreQuantity:N2}")"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="Notes" Filterable="true" Sortable="true" FilterProperty="Notes" SortProperty="Notes"
                                                  Title="@LM.Get("mtColumnNotes")" Groupable="false">
                                <Template Context="order">
                                    <RadzenLabel Text="@($"{order.Notes}")"/>
                                </Template>
                                <EditTemplate Context="order">
                                    <RadzenTextBox @bind-Value="order.Notes" />
                                </EditTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                                <Template Context="order">
                                    @if (!_isEditingMoonGrid)
                                    {
                                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))" />
                                    }
                                </Template>
                                <EditTemplate Context="order">
                                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(order))" />
                                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(order))" />
                                </EditTemplate>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    @if (_isLoading)
                    {
                        <RadzenLabel Text="@LM.Get("webLoading")" Class="generalLoadingTabText" />
                    }
                </RadzenTabsItem>
            }
            @if (_hasViewAccess || _hasLimitedAccess)
            {
                <RadzenTabsItem Text="@LM.Get("mtAvailabilityHeader")" Style="padding: 0;">
                    <div class="row">
                        <div style="margin-left: 10px;">
                            <button class='navButton2' @onclick="ImportMoonDataClick" style="width: 150px; margin-left: 10px;"><RadzenIcon Icon="system_update_alt" Style="font-size: 15px; vertical-align: text-top; " />@LM.Get("webButtonUploadScan")</button>
                        </div>
                    </div>
                    <RadzenDataGrid TItem="ThdMoonTableEntry" FilterMode="FilterMode.Simple"
                                    Count="@_countReports"
                                    LoadData="@LoadReportGrid" @ref="_reportGrid" Data="@_filteredReportList"
                                    AllowFiltering="true" AllowSorting="true" AllowColumnResize="false" AllowGrouping="true"
                                    Style="height: 640px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    LogicalFilterOperator="LogicalFilterOperator.And"
                                    PageSize="100" AllowPaging="true"
                                    Render="@OnReportsRender">
                        <GroupHeaderTemplate>
                            @(context.Data.Key ?? ""), @(context.Data.Items.Cast<ThdMoonTableEntry>().FirstOrDefault()?.PlanetName) - @(context.Data.Items.Cast<ThdMoonTableEntry>().FirstOrDefault()?.SystemName)
                        </GroupHeaderTemplate>
                        <Columns>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="RegionName" Filterable="true" Sortable="true" FilterProperty="RegionName" SortProperty="RegionName"
                                                  Title="@LM.Get("mtColumnRegionName")" Width="150px">
                                <Template Context="order">
                                    <RadzenLabel Text="@order.RegionName"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="SystemName" Filterable="true" Sortable="true" FilterProperty="SystemName" SortProperty="SystemName"
                                                  Title="@LM.Get("mtColumnSystemName")" Width="150px">
                                <Template Context="order">
                                    <RadzenLabel Text="@order.SystemName"/>
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="ThdMoonTableEntry" Property="MoonName" Filterable="true" Sortable="true" FilterProperty="MoonName" SortProperty="MoonName"
                                                  Title="@LM.Get("mtColumnMoonName")">
                                <Template Context="order">
                                    <RadzenLabel Text="@($"{order.PlanetName} - {order.MoonName}")"/>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    @if (_isLoadingReport)
                    {
                        <RadzenLabel Text="@LM.Get("webLoading")" Class="generalLoadingTabText"/>
                    }
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
</div>

@code {
    private RadzenDataGrid<ThdMoonTableEntry> _moonsGrid;
    private RadzenDataGrid<ThdMoonTableEntry> _reportGrid;
    private MoonInfoModule _module;
    private bool _hasViewAccess;
    private bool _hasLimitedAccess;
    private bool _isInitialized = false;
    private bool _isLoading = true;
    private bool _isLoadingReport = true;


    private IEnumerable<ThdMoonTableEntry> _filteredMoonList;
    private IEnumerable<ThdMoonTableEntry> _filteredReportList;
    private List<WebStellarRegionEntry> _regions;

    private int _countMoons;
    private int _countReports;

    //filters
#region OreFilter
    private IEnumerable<string> _selectedOreNamesList;
    private IEnumerable<string> _oreNamesList;
    
    private void OnOrenameFilterChange(object obj)
    {
        if (_selectedOreNamesList != null && !_selectedOreNamesList.Any())
        {
            _selectedOreNamesList = null;  
        }
    }
#endregion

    protected override async Task OnInitializedAsync()
    {
        var user = await Store.GetAsync<WebAuthUserData>("user");
        if (user == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        _module = TickManager.GetModule<MoonInfoModule>();

        _hasViewAccess = await MoonInfoModule.HasViewAccess(user);
        _hasLimitedAccess = await MoonInfoModule.HasLimitedAccess(user);

        if (!_hasViewAccess && !_hasLimitedAccess)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        await Task.Factory.StartNew(async () =>
        {
            try
            {
                _oreNamesList = (await dbContext.MoonTable.Select(a => a.OreName).Distinct().ToListAsync()).OrderBy(a=> a);
                _isInitialized = true;
            }
            catch (Exception ex)
            {
                await LogHelper.LogEx(ex, LogCat.MoonInfo);
            }

        });
        

        await base.OnInitializedAsync();
    }
    
#region Moons

    private bool _isEditingMoonGrid = false;
    private ThdMoonTableEntry _editingMoonRow;

    async Task EditRow(ThdMoonTableEntry order)
    {
        if (_isEditingMoonGrid) return;
        _editingMoonRow = order.Clone();
        _isEditingMoonGrid = true;
        await _moonsGrid.EditRow(order);
    }

    async Task SaveRow(ThdMoonTableEntry order)
    {
        await _moonsGrid.UpdateRow(order);
        await _module.SaveMoonTableEntry(order);

        _editingMoonRow = null;
        _isEditingMoonGrid = false;
    }

    async Task CancelEdit(ThdMoonTableEntry order)
    {
         order.UpdateFrom(_editingMoonRow);
        _moonsGrid.CancelEditRow(order);

        _editingMoonRow = null;
        _isEditingMoonGrid = false;
        await Task.Delay(1);
    }

    
    private async Task LoadMoonsGrid(LoadDataArgs arg)
    {
        try
        {
            while (!_isInitialized)
                await Task.Delay(100);
            _isLoading = true;
            await InvokeAsync(StateHasChanged);

            var query = dbContext.MoonTable.AsQueryable();

            if (!string.IsNullOrEmpty(arg.Filter))
                query = query.Where(arg.Filter);
            query = !string.IsNullOrEmpty(arg.OrderBy) ? query.OrderBy(arg.OrderBy) : query.OrderByDescending(a => a.MoonName);
            _countMoons = query.Count();
            _filteredMoonList = query.Skip(arg.Skip.Value).Take(arg.Top.Value).ToList();
        }
        catch (Exception ex)
        {
            await LogHelper.LogEx(ex, LogCat.MoonInfo);
            await Modal.ShowError();
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void MoonCellRender(DataGridCellRenderEventArgs<ThdMoonTableEntry> args)
    {
        if (MiningScheduleModule.R64List.Contains(args.Data.OreId))
        {
            args.Attributes.Add("style", $"background-color: #ff9980;");
            args.Attributes.Add("class", "frontcolor");
        }
        else
        {
            if (MiningScheduleModule.R32List.Contains(args.Data.OreId))
            {
                args.Attributes.Add("style", $"background-color: lightskyblue;");
            }
        }
    }


    private void OnMoonsRender(DataGridRenderEventArgs<ThdMoonTableEntry> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "RegionName", Title = LM.Get("mtColumnRegionName")});
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "SystemName", Title = LM.Get("mtColumnSystemName") });
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "MoonName", Title = LM.Get("mtColumnMoonName") });
            StateHasChanged();
        }
    }
    #endregion
    
    
#region Reports    

private async Task LoadReportGrid(LoadDataArgs arg)
    {
        try
        {
            while (!_isInitialized)
                await Task.Delay(100);
            _isLoadingReport = true;
            await InvokeAsync(StateHasChanged);

            var query = dbContext.MoonTable.AsNoTracking().AsQueryable();

            if (!string.IsNullOrEmpty(arg.Filter))
                query = query.Where(arg.Filter);
            query = !string.IsNullOrEmpty(arg.OrderBy) ? query.OrderBy(arg.OrderBy) : query.OrderByDescending(a => a.MoonName);
            _countReports = query.Count();
            _filteredReportList = query.Skip(arg.Skip.Value).Take(arg.Top.Value).ToList().GroupBy(a=> a.MoonId).Select(a=> a.FirstOrDefault());
        }
        catch (Exception ex)
        {
            await LogHelper.LogEx(ex, LogCat.MoonInfo);
            await Modal.ShowError();
        }
        finally
        {
            _isLoadingReport = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnReportsRender(DataGridRenderEventArgs<ThdMoonTableEntry> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "RegionName", Title = LM.Get("mtColumnRegionName")});
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "SystemName", Title = LM.Get("mtColumnSystemName") });
            StateHasChanged();
        }
    }
#endregion
    


    private async Task ImportMoonDataClick()
    {
        var prms = new ModalParameters();
        prms.Add("Header", LM.Get("mtPasteHeader"));
        prms.Add("Message", LM.Get("mtPasteMessage"));
        prms.Add("ValidationType", WebInputValidateEnum.MoonInput);

        var o = new ModalOptions { DisableBackgroundCancel = true, HideHeader = true, ContentScrollable = true };
        var r = await Modal.Show<PasteDialog>("Inspection", prms, o).Result;
        if (!r.Cancelled)
        {
            var list = await _module.UpdateMoonTable(((MoonUploadResult)r.Data).List);
            await UpdateLoadedList(list);
            await _moonsGrid.Reload();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateLoadedList(List<ThdMoonTableEntry> list)
    {
        try
        {
            var regions = list.Select(a => a.RegionId).Distinct().ToList(
            );
            var newRegions = regions.Except(_regions.Select(a => a.Id));
            if (newRegions.Any())
            {
                foreach (var region in newRegions)
                {
                    var r = await APIHelper.ESIAPI.GetRegionData("MoonInfo", region);
                    _regions.Add(new WebStellarRegionEntry {Id = region, Name = r?.RegionName ?? LM.Get("Unknown")});

                }
            }

            if(_moonsGrid != null)
                await _moonsGrid.Reload();
            if(_reportGrid != null)
                await _reportGrid.Reload();
            // await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await LogHelper.LogEx(ex, LogCat.MoonInfo);
        }
    }



}
