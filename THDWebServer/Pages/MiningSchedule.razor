@page "/ms"
@attribute [Authorize(Roles = CustomAuthenticationStateProvider.ROLE_MINING_SCHEDULE)]
@using ThunderED.Modules
@using System.Linq.Dynamic.Core
@using THDWebServer.Pages.Modals
@inject ProtectedSessionStorage Store
@inject IModalService Modal
@inject NavigationManager Nav

<div class="text-center pageHeader">
    @LM.Get("hrmMiningPage")
</div>

<div class="container fontEternal">
    <RadzenTabs Style="padding: 0;">
        <Tabs>
            @if (_hasExtractionsViewAccess)
            {
                <RadzenTabsItem Text="@LM.Get("msExtractionsHeader")" Style="padding: 0;">
                    <RadzenDataGrid Count="@_countExtractions" Data="@_filteredExtrList" TItem="WebMiningExtraction" LoadData="@LoadExtractionsGrid" 
                                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                                AllowSorting="true" AllowColumnResize="true" AllowGrouping="false" IsLoading="@(!_isExtractionsLoaded)"
                                PageSize="30" AllowPaging="true"
                                Style="height: 640px;" Render="@OnExtractionsRender">
                        <Columns>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="IconUrl" Filterable="false" Sortable="false" Width="90px">
                                <Template Context="order">
                                    <RadzenImage Path="@ServerPaths.GetTypeImageUrl(order.TypeId)" Style="width: 64px; height: 64px; display: block"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="CorporationName" Filterable="true" Sortable="true" Title="@LM.Get("msExtractionsColumnOwner")"/>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="StructureName" Filterable="true" Sortable="true"  Title="@LM.Get("msExtractionsColumnName")"/>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="OreComposition" Filterable="true" Sortable="true" Width="170px" Title="@LM.Get("msExtractionsColumnOre")">
                                <Template Context="order">
                                    @((MarkupString) order.OreComposition)
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="Operator" Filterable="true" Sortable="true" Width="130px" Title="@LM.Get("msExtractionsColumnOperator")"/>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="ChunkArrivalTime" Filterable="true" Sortable="true" Width="140px" Title="@LM.Get("msExtractionsColumnFinishDate")">
                                <Template Context="order">
                                    <RadzenLabel Text="@(order.ChunkArrivalTime.ToString(SettingsManager.Settings.Config.ShortTimeFormat))"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="NaturalDecayTime" Filterable="true" Sortable="true" Width="140px" Title="@LM.Get("msExtractionsColumnExplode")">
                                <Template Context="order">
                                    <RadzenLabel Text="@(order.NaturalDecayTime.ToString(SettingsManager.Settings.Config.ShortTimeFormat))"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WebMiningExtraction" Property="NaturalDecayTime" Filterable="true" Sortable="true" Width="100px" Title="@LM.Get("msExtractionsColumnRemains")"/>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenTabsItem>
            }
            @if (_hasLedgerViewAccess)
            {
                <RadzenTabsItem Text="@LM.Get("msLedgerHeader")" Style="padding: 0;">
                    <RadzenDataGrid Count="@_countLedgers" Data="@_filteredLedgerList" TItem="WebMiningLedger" LoadData="@LoadLedgersGrid"
                                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                                AllowPaging="true" PageSize="30"  IsLoading="@(!_isLedgerLoaded)"
                                AllowSorting="true" AllowColumnResize="false" AllowGrouping="true"
                                Style="height: 640px;" RowDoubleClick="async args => await InspectLedger(args?.Data)">
                        <GroupHeaderTemplate>
                            @(context?.Data?.Key ?? "") 
                        </GroupHeaderTemplate>
                        <Columns>
                            <RadzenDataGridColumn TItem="WebMiningLedger" Property="IconUrl" Filterable="false" Sortable="false" Width="90px">
                                <Template Context="order">
                                    <RadzenImage Path="@ServerPaths.GetTypeImageUrl(order.TypeId)" Style="width: 64px; height: 64px; display: block"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WebMiningLedger" Title="@LM.Get("msExtractionsColumnOwner")" Property="CorporationName" Filterable="true" Sortable="true"/>
                            <RadzenDataGridColumn TItem="WebMiningLedger" Title="@LM.Get("msExtractionsColumnName")" Property="StructureName" Filterable="true" Sortable="true"/>
                            <RadzenDataGridColumn TItem="WebMiningLedger" Filterable="true" Sortable="true" Width="140px" FilterProperty="ChunkArrivalTime" SortProperty="ChunkArrivalTime"
                                              Title="@LM.Get("msLedgerColumnDate")">
                                <Template Context="order">
                                    <RadzenLabel Text="@(order.Date.ToString(SettingsManager.Settings.Config.DateFormat))"/>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WebMiningLedger" Filterable="true" Sortable="true" Width="160px"
                                              Title="@LM.Get("msLedgerColumnStats")">
                                <Template Context="order">
                                    @((MarkupString) order.Stats)
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
</div>


@functions {

    private MiningScheduleModule _module;
    private MiningScheduleModule.WebMiningExtractionResult _extractions;
    private string _exFilterCorp;
    private string _ledgerFilterCorp;

    private volatile bool _isExtractionsLoaded = false;
    private volatile bool _isLedgerLoaded = false;
    //private RadzenGrid<WebMiningExtraction> _extrGrid;
    //private RadzenDataGrid<WebMiningLedger> _ledgersGrid;

    private int _countExtractions;
    private IEnumerable<WebMiningExtraction> _filteredExtrList;
    private int _countLedgers;
    private IEnumerable<WebMiningLedger> _filteredLedgerList;
    private List<WebMiningLedger> _ledgers;

    private bool _hasExtractionsViewAccess;
    private bool _hasExtractionsEditAccess;
    private bool _hasLedgerViewAccess;
    private bool _hasLedgerEditAccess;
    private MiningComplexAccessGroup _extractionGroup;
    private MiningComplexAccessGroup _ledgerGroup;

    protected override async Task OnInitializedAsync()
    {
        var user = await Store.GetAsync<WebAuthUserData>("user");
        if (user == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        _module = TickManager.GetModule<MiningScheduleModule>();

        string groupName = null;
        _hasExtractionsEditAccess = MiningScheduleModule.HasExtrEditAccess(user, out groupName);
        _hasExtractionsViewAccess = _hasExtractionsEditAccess || await MiningScheduleModule.HasObserverExtrViewAccess(user);
        if (_hasExtractionsEditAccess && !string.IsNullOrEmpty(groupName))
            _extractionGroup = SettingsManager.Settings.MiningScheduleModule.Extractions.ComplexAccess.FirstOrDefault(a => a.Key.Equals(groupName, StringComparison.OrdinalIgnoreCase)).Value;

        _hasLedgerEditAccess = MiningScheduleModule.HasLedgerEditAccess(user, out groupName);
        _hasLedgerViewAccess = _hasLedgerEditAccess || await MiningScheduleModule.HasObserverLedgerViewAccess(user);
        if (_hasLedgerEditAccess && !string.IsNullOrEmpty(groupName))
            _ledgerGroup = SettingsManager.Settings.MiningScheduleModule.Ledger.ComplexAccess.FirstOrDefault(a => a.Key.Equals(groupName, StringComparison.OrdinalIgnoreCase)).Value;

        if (!_hasLedgerViewAccess && !_hasExtractionsViewAccess)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        if (_hasExtractionsViewAccess)
        {
            await Task.Factory.StartNew(async () =>
            {
                _extractions = await _module.GetExtractions(_extractionGroup, user);
                _isExtractionsLoaded = true;
            });
        }

        if (_hasLedgerViewAccess)
        {
            await Task.Factory.StartNew(async () =>
            {
                _ledgers = await _module.GetLedgers(_ledgerGroup, user);
                _isLedgerLoaded = true;
            });
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadExtractionsGrid(LoadDataArgs arg)
    {
        while (!_isExtractionsLoaded)
            await Task.Delay(100);

        var innerList = !string.IsNullOrEmpty(_exFilterCorp) ?
            _extractions.Extractions.Where(a => a.CorporationName.Equals(_exFilterCorp, StringComparison.OrdinalIgnoreCase)).ToList() :
            _extractions.Extractions;

        _filteredExtrList = ApplyAjaxFilters(innerList, arg, out _countExtractions);
        _isExtractionsLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    private List<T> ApplyAjaxFilters<T>(IEnumerable<T> list, LoadDataArgs args, out int count)
    {
        var query = list.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);
        count = query.Count();

        if (!string.IsNullOrEmpty(args.OrderBy))
            query = query.OrderBy(args.OrderBy);
        if (args.Skip.HasValue)
            query = query.Skip(args.Skip.Value);
        if (args.Top.HasValue)
            query = query.Take(args.Top.Value);
        return query.ToList();
    }

    private async Task LoadLedgersGrid(LoadDataArgs arg)
    {
        while (!_isLedgerLoaded)
            await Task.Delay(100);

        var innerList = !string.IsNullOrEmpty(_ledgerFilterCorp) ?
            _ledgers.Where(a => a.CorporationName.Equals(_ledgerFilterCorp, StringComparison.OrdinalIgnoreCase)).ToList() :
            _ledgers;

        _filteredLedgerList = ApplyAjaxFilters(innerList.OrderByDescending(a => a.Date), arg, out _countLedgers);


        await Task.Factory.StartNew(async () =>
        {
            _filteredLedgerList = await _module.WebUpdateLedgerStats(_filteredLedgerList.ToList(), 0);
            await InvokeAsync(StateHasChanged);
        });
        await InvokeAsync(StateHasChanged);
    }

    private async Task InspectLedger(WebMiningLedger item)
    {
        await Modal.ShowModal<InspectLedger>(item, LM.Get("webMiningIspectionHeader", item.StructureName), "Ledger");
    }

    private void OnExtractionsRender(DataGridRenderEventArgs<WebMiningExtraction> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "CorporationName", Title = LM.Get("msExtractionsColumnOwner")});
            StateHasChanged();
        }
    }

}
