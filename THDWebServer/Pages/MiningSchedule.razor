@page "/ms"
@attribute [Authorize(Roles = CustomAuthenticationStateProvider.ROLE_MINING_SCHEDULE)]
@using ThunderED.Modules
@using System.Linq.Dynamic.Core
@using THDWebServer.Pages.Modals
@inject ProtectedSessionStorage Store
@inject IModalService Modal
@inject NavigationManager Nav

<div class="container">
    <RadzenTabs Style="padding: 0;">
        <Tabs>
            <RadzenTabsItem Text="@LM.Get("msExtractionsHeader")" Style="padding: 0;">
                <RadzenDropDown TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data="@_extractions?.Corporations" Style="width: 400px;" @bind-Value="_exFilterCorp"
                                Change="@OnExtractionFilterChange" AllowFiltering="true" AllowClear="true" />

                <RadzenGrid PageSize="20" Count="@_countExtractions" Data="@_filteredExtrList" TItem="WebMiningExtraction"
                            LoadData="@LoadExtractionsGrid" @ref="_extrGrid" AllowFiltering="true" AllowPaging="true" AllowSorting="true" AllowColumnResize="true"
                            Style="height: 640px;">
                    <Columns>
                        <RadzenGridColumn TItem="WebMiningExtraction" Property="CorporationName" Filterable="true" Sortable="true" Width="200px" FilterProperty="CorporationName" SortProperty="CorporationName"
                                          Title="@LM.Get("msExtractionsColumnOwner")">
                            <Template Context="order">
                                <RadzenLabel Text="@order.CorporationName" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="WebMiningExtraction" Filterable="true" Sortable="true" Width="200px" FilterProperty="StructureName" SortProperty="StructureName"
                                          Title="@LM.Get("msExtractionsColumnName")">
                            <Template Context="order">
                                <RadzenLabel Text="@order.StructureName" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="WebMiningExtraction" Filterable="true" Sortable="true" Width="100px" FilterProperty="OreComposition" SortProperty="OreComposition"
                                          Title="@LM.Get("msExtractionsColumnOre")">
                            <Template Context="order">
                                <RadzenLabel Text="@order.OreComposition" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="WebMiningExtraction" Filterable="true" Sortable="true" Width="80px" FilterProperty="Operator" SortProperty="Operator"
                                          Title="@LM.Get("msExtractionsColumnOperator")">
                            <Template Context="order">
                                <RadzenLabel Text="@order.Operator" />
                            </Template>
                        </RadzenGridColumn>

                        <RadzenGridColumn TItem="WebMiningExtraction" Filterable="true" Sortable="true" Width="80px" FilterProperty="ChunkArrivalTime" SortProperty="ChunkArrivalTime"
                                          Title="@LM.Get("msExtractionsColumnFinishDate")">
                            <Template Context="order">
                                <RadzenLabel Text="@(order.ChunkArrivalTime.ToString(SettingsManager.Settings.Config.ShortTimeFormat))" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="WebMiningExtraction" Filterable="true" Sortable="true" Width="80px" FilterProperty="NaturalDecayTime" SortProperty="NaturalDecayTime"
                                          Title="@LM.Get("msExtractionsColumnExplode")">
                            <Template Context="order">
                                <RadzenLabel Text="@(order.NaturalDecayTime.ToString(SettingsManager.Settings.Config.ShortTimeFormat))" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="WebMiningExtraction" Filterable="true" Sortable="true" Width="60px" FilterProperty="NaturalDecayTime" SortProperty="NaturalDecayTime"
                                          Title="@LM.Get("msExtractionsColumnRemains")">
                            <Template Context="order">
                                <RadzenLabel Text="@(order.Remains)" />
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>

                @if (!_isExtractionsLoaded)
                {
                    <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                }

            </RadzenTabsItem>
            <RadzenTabsItem Text="@LM.Get("msLedgerHeader")" Style="padding: 0;">
                <RadzenDropDown TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data="@_extractions?.Corporations" Style="width: 400px;" @bind-Value="_ledgerFilterCorp"
                                Change="@OnLedgerFilterChange" AllowFiltering="true" AllowClear="true" />
                <RadzenGrid PageSize="20" Count="@_countLedgers" Data="@_filteredLedgerList" TItem="WebMiningLedger"
                            LoadData="@LoadLedgersGrid" @ref="_ledgersGrid" AllowFiltering="true" AllowPaging="true" AllowSorting="true" AllowColumnResize="true"
                            Style="height: 640px;" RowDoubleClick="async args=> await InspectLedger(args)">
                    <Columns>
                        <RadzenGridColumn TItem="WebMiningLedger" Property="CorporationName" Filterable="true" Sortable="true" Width="200px" FilterProperty="CorporationName" SortProperty="CorporationName"
                                          Title="@LM.Get("msExtractionsColumnOwner")">
                            <Template Context="order">
                                <RadzenLabel Text="@order.CorporationName" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="WebMiningLedger" Filterable="true" Width="200px" Sortable="true" FilterProperty="StructureName" SortProperty="StructureName"
                                          Title="@LM.Get("msExtractionsColumnName")">
                            <Template Context="order">
                                <RadzenLabel Text="@order.StructureName" />
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="WebMiningLedger" Filterable="true" Sortable="true" Width="120px" FilterProperty="ChunkArrivalTime" SortProperty="ChunkArrivalTime"
                                          Title="@LM.Get("msLedgerColumnDate")">
                            <Template Context="order">
                                <RadzenLabel Text="@(order.Date.ToString(SettingsManager.Settings.Config.DateFormat))" />
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
                @if (!_isLedgerLoaded)
                {
                    <RadzenLabel Text="@LM.Get("webLoading")" Class="hrmLoadingTabText" />
                }
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>


@functions {

    private MiningScheduleModule _module;
    private MiningScheduleModule.WebMiningExtractionResult _extractions;
    private string _exFilterCorp;
    private string _ledgerFilterCorp;

    private bool _isExtractionsLoaded = false;
    private bool _isLedgerLoaded = false;
    private RadzenGrid<WebMiningExtraction> _extrGrid;
    private RadzenGrid<WebMiningLedger> _ledgersGrid;

    private int _countExtractions;
    private List<WebMiningExtraction> _filteredExtrList;
    private int _countLedgers;
    private List<WebMiningLedger> _filteredLedgerList;
    private List<WebMiningLedger> _ledgers;


    protected override async Task OnInitializedAsync()
    {
        var user = await Store.GetAsync<WebAuthUserData>("user");
        if (user == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        _module = TickManager.GetModule<MiningScheduleModule>();

        await Task.Factory.StartNew(async () =>
        {
            _extractions = await _module.GetExtractions();
            _isExtractionsLoaded = true;
        });

        await Task.Factory.StartNew(async () =>
        {
            _ledgers = await _module.GetLedgers();
            _isLedgerLoaded = true;
        });

        await base.OnInitializedAsync();
    }

    private async Task OnExtractionFilterChange()
    {
        await _extrGrid.Reload();
    }

    private async Task LoadExtractionsGrid(LoadDataArgs arg)
    {
        while (!_isExtractionsLoaded)
            await Task.Delay(100);

        var innerList = !string.IsNullOrEmpty(_exFilterCorp) ?
            _extractions.Extractions.Where(a => a.CorporationName.Equals(_exFilterCorp, StringComparison.OrdinalIgnoreCase)).ToList() :
            _extractions.Extractions;

        _filteredExtrList = ApplyAjaxFilters(innerList, arg, out _countExtractions);
        _isExtractionsLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    private List<T> ApplyAjaxFilters<T>(IEnumerable<T> list, LoadDataArgs args, out int count)
    {
        var query = list.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);
        count = query.Count();

        if (!string.IsNullOrEmpty(args.OrderBy))
            query = query.OrderBy(args.OrderBy);
        if (args.Skip.HasValue)
            query = query.Skip(args.Skip.Value);
        if (args.Top.HasValue)
            query = query.Take(args.Top.Value);
        return query.ToList();
    }

    private async Task OnLedgerFilterChange()
    {
        await _ledgersGrid.Reload();
    }

    private async Task LoadLedgersGrid(LoadDataArgs arg)
    {
        while (!_isLedgerLoaded)
            await Task.Delay(100);

        var innerList = !string.IsNullOrEmpty(_ledgerFilterCorp) ?
            _ledgers.Where(a => a.CorporationName.Equals(_ledgerFilterCorp, StringComparison.OrdinalIgnoreCase)).ToList() :
            _ledgers;

        _filteredLedgerList = ApplyAjaxFilters(innerList.OrderByDescending(a => a.Date), arg, out _countLedgers);
        await InvokeAsync(StateHasChanged);
    }

    private async Task InspectLedger(WebMiningLedger item)
    {
        var prms = new ModalParameters();
        prms.Add("Ledger", item);
        var o = new ModalOptions { DisableBackgroundCancel = true, HideHeader = true, ContentScrollable = true };
        await Modal.Show<InspectLedger>("Inspection", prms, o).Result;
    }

}
