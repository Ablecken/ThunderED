@page "/feedauthpage"
@using ThunderED.Modules

@inject ProtectedSessionStorage Store
@inject AuthenticationStateProvider Auth
@inject NavigationManager Nav

<div class="container" style="height: 100%">
    <div class="frontcolor text-center pageHeader">
        @LM.Get("authWebSystemHeader")
    </div>

    <div class="centralizer">
        <div class="text-center">
            <!-- MANAGEMENT-->
            <!-- HEADER -->
            @if (DisplayManagerHeader)
            {

                <p class="frontcolor fontEternalShadow">@((MarkupString) LM.Get("authPageSystemAuthHeader"))</p>
            }
            else
            {
                <p class="frontcolor fontEternalShadow text-center">
                    @LM.Get("authWebNoFeedsHeader")
                </p>
            }

            @if (UserId > 0 && ContractNotificationsModule.HasAuthAccess(UserId))
            {
                <p style="text-align: -webkit-center">
                    <a href="@GetContractsAuthURL()"><div class="navButton1 longButton" role="button">@GetContractsAuthText()</div></a>
                </p>
            }
            <!-- NOTIFICATIONS BUTTON -->
            @if ((UserId > 0 && NotificationModule.HasAuthAccess(UserId) || SettingsManager.Settings.WebAuthModule.DisplayFeedAuthWithoutRegistration) && SettingsManager.Settings.Config.ModuleNotificationFeed)
            {
<p style="text-align: -webkit-center">
                    <a href="@ServerPaths.GetAuthNotifyURL()"><div class="navButton1 longButton" role="button">@SettingsManager.Settings.NotificationFeedModule.AuthButtonDiscordText</div></a>
                </p>
            }
            <!-- MAIL BUTTON -->
            @if ((MailModule.HasAuthAccess(UserId) || SettingsManager.Settings.WebAuthModule.DisplayFeedAuthWithoutRegistration) && SettingsManager.Settings.Config.ModuleMail)
            {
<p style="text-align: -webkit-center">
                    <a href="@ServerPaths.GetMailAuthURL()"><div class="navButton1 longButton" role="button">@SettingsManager.Settings.MailModule.AuthButtonDiscordText</div></a>
                </p>
            }

            <!-- INDUSTRIAL BUTTON -->
            @if ((IndustrialJobsModule.HasAuthAccess(UserId) || SettingsManager.Settings.WebAuthModule.DisplayFeedAuthWithoutRegistration) && SettingsManager.Settings.Config.ModuleIndustrialJobs)
            {
<p style="text-align: -webkit-center">
                    <a href="@GetIndustryAuthURL()"><div class="navButton1 longButton" role="button">@GetIndustryAuthText()</div></a>
                </p>
            }
            <!-- MINING SCHEDULE BUTTON -->
            @if ((MiningScheduleModule.HasAuthAccess(UserData).GetAwaiter().GetResult() || SettingsManager.Settings.WebAuthModule.DisplayFeedAuthWithoutRegistration) && SettingsManager.Settings.Config.ModuleMiningSchedule)
            {
<p style="text-align: -webkit-center">
                    <a href="@GetMiningScheduleAuthURL()"><div class="navButton1 longButton" role="button">@GetMiningScheduleAuthText()</div></a>
                </p>
            }
            <!-- STRUCTURES BUTTON -->
            @if ((StructureManagementModule.HasAuthAccess(UserData).GetAwaiter().GetResult() || SettingsManager.Settings.WebAuthModule.DisplayFeedAuthWithoutRegistration) && SettingsManager.Settings.Config.ModuleStructureManagement)
            {
<p style="text-align: -webkit-center">
                    <a href="@GetStructuresAuthURL()"><div class="navButton1 longButton" role="button">@GetStructuresAuthText()</div></a>
                </p>
            }

            <!-- STANDINGS BUTTON -->
            @if ((WebAuthModule.HasAuthAccess(UserId) || SettingsManager.Settings.WebAuthModule.DisplayFeedAuthWithoutRegistration) && SettingsManager.Settings.Config.ModuleAuthWeb)
            {
<p style="text-align: -webkit-center">
                    <a href="@ServerPaths.GetStandsAuthURL()"><div class="navButton1 longButton" role="button">@GetStandsAuthText()</div></a>
                </p>
            }

            <br>
            <br>
            <p style="text-align: -webkit-center">
                <a href="/"><div class="navButton2" role="button" style="width: 150px">@LM.Get("backText")</div></a>
            </p>

        </div>
    </div>
</div>

@code
{
    public IEnumerable<KeyValuePair<string, WebAuthGroup>> GroupsForCycle { get; set; }

    public bool DisplayManagerHeader => SettingsManager.Settings.Config.ModuleAuthWeb ||
                                        SettingsManager.Settings.Config.ModuleNotificationFeed ||
                                        SettingsManager.Settings.Config.ModuleMail ||
                                        SettingsManager.Settings.Config.ModuleContractNotifications ||
                                        SettingsManager.Settings.Config.ModuleIndustrialJobs;

    protected long UserId { get; set; }
    private WebAuthUserData UserData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var usr = await Store.GetAsync<WebAuthUserData>("user");
        UserData = usr;
        UserId = usr?.Id ?? 0;

        if (!await CustomAuthenticationStateProvider.HasAuth(Auth) && !SettingsManager.Settings.WebAuthModule.DisplayFeedAuthWithoutRegistration)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        await base.OnInitializedAsync();
    }

    private string GetContractsAuthURL()
    {
        string groupName = null;
        var group = TickManager.GetModule<ContractNotificationsModule>()?.WebGetAuthGroup(UserId, out groupName);
        if (group == null) return null;

        return ServerPaths.GetContractsAuthURL(group.FeedPersonalContracts, group.FeedCorporateContracts, groupName);
    }

    private string GetContractsAuthText()
    {
        string groupName = null;
        var group = TickManager.GetModule<ContractNotificationsModule>()?.WebGetAuthGroup(UserId, out groupName);
        return @group?.ButtonText ?? @SettingsManager.Settings.ContractNotificationsModule.AuthButtonDiscordText;
    }

    private string GetIndustryAuthURL()
    {
        string groupName = null;
        var group = TickManager.GetModule<IndustrialJobsModule>()?.WebGetAuthGroup(UserId, out groupName);
        if (group == null) return null;

        return ServerPaths.GetIndustryJobsAuthURL(group.Filters.Any(a => a.Value.FeedPersonalJobs),
            group.Filters.Any(a => a.Value.FeedCorporateJobs), groupName);
    }

    private string GetIndustryAuthText()
    {
        string groupName = null;
        var group = TickManager.GetModule<IndustrialJobsModule>()?.WebGetAuthGroup(UserId, out groupName);
        return @group?.ButtonText ?? @SettingsManager.Settings.IndustrialJobsModule.AuthButtonDiscordText;
    }

    private string GetMiningScheduleAuthURL()
    {
        return ServerPaths.GetMiningScheduleAuthURL();
    }

    private string GetMiningScheduleAuthText()
    {
        return SettingsManager.Settings.MiningScheduleModule.AuthButtonDiscordText;
    }

    private string GetStructuresAuthURL()
    {
        return ServerPaths.GetStructuresAuthURL();
    }

    private string GetStructuresAuthText()
    {
        return SettingsManager.Settings.StructureManagementModule.AuthButtonDiscordText;
    }

    private string GetStandsAuthText()
    {
        var grp = SettingsManager.Settings.WebAuthModule.GetEnabledAuthGroups().FirstOrDefault(a => a.Value.StandingsAuth != null && a.Value.IsEnabled).Value;
        return grp?.CustomButtonText;
    }
}
