@page "/authpage"
@using ThunderED.Modules
@using ThunderED.Classes.Enums

@inject ProtectedSessionStorage Store
@inject AuthenticationStateProvider Auth

<div class="container" style="height: 100%">
    <div class="frontcolor text-center pageHeader">
        <p>
            @LM.Get("authWebDiscordHeader")
        </p>
    </div>

    <div class="centralizer">
        <div class="text-center">
            <!-- HEADER -->
            @if (SettingsManager.Settings.Config.ModuleAuthWeb && Groups.Count > 0)
            {
                @if (WebUiHelper.GetAsset("discord_light.png") != null)
                {
                    <img src="@WebUiHelper.GetAsset("discord_light.png")" class="imgShadow" style="width: 100px;">
                }
                <p class="frontcolor fontEternalShadow">@((MarkupString) LM.Get("authPageGeneralAuthHeader"))</p>
            }
            <!-- ONE BUTTON -->
            @if (SettingsManager.Settings.WebAuthModule.UseOneAuthButton)
            {
                <p style="text-align: -webkit-center">
                    <a href="@ServerPaths.GetOneButtonUrl()"><div class='navButton1 longButton' role="button">@SettingsManager.Settings.WebAuthModule.AuthButtonDiscordText</div></a>
                </p>
            }
            <!-- STANDINGS AUTH LIST-->
            @if (SettingsManager.Settings.Config.ModuleAuthWeb)
            {
                @foreach (var (key, group) in GroupsForCycle.Where(a => a.Value.StandingsAuth != null))
                {
                    @if (group.Hidden)
                    {
                        continue;
                    }

                    <p style="text-align: -webkit-center">
                        <a href="@ServerPaths.GetAuthUrl()?group=@HttpUtility.UrlEncode(key)">
                            <div class="navButton1 longButton" role="button">@(string.IsNullOrEmpty(group.CustomButtonText) ? key : group.CustomButtonText)</div></a>
                    </p>
                }
            }
            <!-- NORMAL AUTH LIST-->
            @if (SettingsManager.Settings.Config.ModuleAuthWeb)
            {
                @foreach (var (key, group) in GroupsForCycle.Where(a => a.Value.StandingsAuth == null))
                {
                    @if (group.Hidden)
                    {
                        continue;
                    }
                    @if (group.BindToMainCharacter && !_hasReg) continue;

                    <p style="text-align: -webkit-center">
                        <a href="@ServerPaths.GetAuthUrl()?group=@HttpUtility.UrlEncode(group.BindToMainCharacter ? WebAuthModule.DEF_ALTREGGROUP_NAME : key)">
                            <div class='navButton1 longButton text-center' role="button">@(group.CustomButtonText ?? SettingsManager.Settings.WebAuthModule.AuthButtonDiscordText)</div></a>
                    </p>
                }
            }

            <br>
            <br>
            <p style="text-align: -webkit-center">
                <a href="/"><div class='navButton2 text-center' role="button" style="width: 150px; height: 35px;">@LM.Get("backText")</div></a>
            </p>

        </div>
    </div>
</div>

@code
{
    public Dictionary<string, WebAuthGroup> Groups { get; set; }

    public IEnumerable<KeyValuePair<string, WebAuthGroup>> GroupsForCycle { get; set; }

    public bool DisplayManagerHeader => SettingsManager.Settings.Config.ModuleAuthWeb ||
                                        SettingsManager.Settings.Config.ModuleNotificationFeed ||
                                        SettingsManager.Settings.Config.ModuleMail ||
                                        SettingsManager.Settings.Config.ModuleContractNotifications ||
                                        SettingsManager.Settings.Config.ModuleIndustrialJobs;

    private bool _hasReg = false;

    protected override async Task OnInitializedAsync()
    {
        Groups = SettingsManager.Settings.WebAuthModule.GetEnabledAuthGroups();
        GroupsForCycle = SettingsManager.Settings.WebAuthModule.UseOneAuthButton
            ? Groups.Where(a => a.Value.ExcludeFromOneButtonMode || a.Value.BindToMainCharacter)
            : Groups;

        var user = await Store.GetAsync<WebAuthUserData>("user");
        if (user != null)
        {
            if (await CustomAuthenticationStateProvider.HasAuth(Auth))
            {

                var auth = await DbHelper.GetAuthUser(user.Id);
                if (auth != null && !auth.MainCharacterId.HasValue)
                    _hasReg = auth.AuthState == (int) UserStatusEnum.Authed;
            }
        }
        await base.OnInitializedAsync();
    }
}
