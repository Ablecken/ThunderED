@page "/settings"
@using ThunderED.Modules
@attribute [Authorize(Roles = CustomAuthenticationStateProvider.ROLE_WEB_SETTINGS)]
@inject ProtectedSessionStorage Store
@inject NavigationManager Nav

<div class="text-center pageHeader">
    @LM.Get("hrmSettingsPage")
</div>

<div class="container">
    <RadzenTabs>
        <Tabs>
           
            @if (_access.CanEditTimers)
            {
                <RadzenTabsItem Text="@LM.Get("webSettingsTimersTabName")">
                    <SettingsEditor_timers/>
                </RadzenTabsItem>
            }
            @if (_access.CanEditSettings)
            {
                <RadzenTabsItem Text="@LM.Get("webSettingsSettingsTabName")">
                    <RadzenTabs>
                        <Tabs>
                            <RadzenTabsItem Text="@LM.Get("webSettingsSimpleAuthTabName")">
                                <SettingsEditor_auth/>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
</div>

@functions {

    private WCEAccessFilter _access = new WCEAccessFilter { CanEditTimers = false, CanEditSettings = false};
    private WebSettingsModule _module;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await Store.GetAsync<WebAuthUserData>("user");
        if (user == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        if (!WebSettingsModule.HasWebAccess(user.Id))
        {
            Nav.NavigateTo("/", true);
            return;
        }

        _module = TickManager.GetModule<WebSettingsModule>();
        if (_module == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }


        _access = await _module.GetAccess(user.Id);
        if (_access == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        await base.OnInitializedAsync();
    }
}
