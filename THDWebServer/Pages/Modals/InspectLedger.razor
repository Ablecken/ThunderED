@using ThunderED.Modules
@using System.Linq.Dynamic.Core
@using ThunderED.Thd

@inject AuthenticationStateProvider Auth
@inject ProtectedSessionStorage Store
@attribute [Authorize(Roles = CustomAuthenticationStateProvider.ROLE_MINING_SCHEDULE)]
@inject NavigationManager Nav
@inject IModalService Modal

<div class="hrm-inspect frontcolor fontEternal">    
    <div class="modal-body">
        <RadzenCheckBox @bind-Value=@_isMergeAltsOption TValue="bool" Change="async (args)=> await MergeAltsChanged(args)" Style="align-self:normal; margin-bottom: 5px;" />&nbsp;@LM.Get("msMergeAltsCheck")
        <div class="row" style="margin-bottom:5px;">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="@LM.Get("wsMiningPaymentFieldReproTaxPerc")" />
            </div>
            <div class="col">
                <RadzenNumeric @bind-Value=@_tax TValue="int" Min="0" Max="100" ShowUpDown="false" Change="@OnTaxChange" />
            </div>
        </div>  
        <button class='navButton2' @onclick="OpenPayments" style="width: 150px; margin-bottom: 5px; margin-left: 10px;" disabled='@(_isLedgerLoading)' >@LM.Get("webMiningPaymentsButton")</button>

        <RadzenDataGrid Count="@_countLedger" LoadData="@LoadLedgerData" Data="@_ledgerList" TItem="WebMiningLedgerEntry"                     
                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple"
                    IsLoading="@(_isLedgerLoading)" AllowGrouping= "false" Render="@OnRender"
                    Style="min-height: 500px;"
                    AllowColumnResize="true" @ref="@_ledgerGrid" AllowPaging="false" AllowSorting="true" >
            <GroupHeaderTemplate>
                @(context.Data.Items.ToDynamicList<WebMiningLedgerEntry>().FirstOrDefault()?.CharacterName ?? "")
            </GroupHeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="WebMiningLedgerEntry" Filterable="false" Sortable="false" Width="90px">
                    <Template Context="order">
                        <RadzenImage Path="@ServerPaths.GetCharacterImageUrl(order.CharacterId)" Style="width: 64px; height: 64px; display: block" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WebMiningLedgerEntry" Property="NameFilter" Filterable="true" Sortable="true" Title="@LM.Get("msLedgerColumnCharacter")">
                    <Template Context="order">
                        @($"{order.CharacterName} [{order.CorporationTicker}]")
                        @if (_isMergeAltsOption && order.Alts.Any())
                        {
                            <img src="@WebUiHelper.GetAsset("alt_ser_small.png")" class="text-center" title="@order.AltData" style="width: 16px; height: 16px;"/>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WebMiningLedgerEntry" Property="OreName" Filterable="true" Sortable="true" Width="150px" Title="@LM.Get("msLedgerColumnOre")"/>
                <RadzenDataGridColumn TItem="WebMiningLedgerEntry" Property="Quantity" Filterable="true" Sortable="true" Groupable="false" Width="200px" Title="@LM.Get("msLedgerColumnQuantity")">
                    <Template Context="order">
                        <RadzenLabel Text="@(order.Quantity.ToString())"/>
                    </Template>
                    <FooterTemplate>
                        @LM.Get("msTotalVolume"): <b>@($"{(_ledgerList?.Sum(o => o.Quantity) * 10):N0} m3")</b>
                    </FooterTemplate>
                    <GroupFooterTemplate>
                        @LM.Get("msTotalVolume"): <b>@($"{context.Data.Items.Cast<WebMiningLedgerEntry>().Sum(a=> a.Quantity):N0} m3")</b>
                    </GroupFooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WebMiningLedgerEntry" Property="Price" Filterable="true" Sortable="true" Groupable="false" Width="220px" Title="@LM.Get("msLedgerColumnPrice")">
                    <Template Context="order">
                        <RadzenLabel Text="@($"{order.Price:N0} ISK")"/>
                    </Template>
                    <FooterTemplate>
                        @LM.Get("msTotalIsk"): <b>@($"{_ledgerList?.Sum(o => o.Price):N0} ISK")</b>
                    </FooterTemplate>
                    <GroupFooterTemplate>
                        @LM.Get("msTotalIsk"): <b>@($"{context.Data.Items.Cast<WebMiningLedgerEntry>().Sum(a=> a.Price):N0} ISK")</b>
                    </GroupFooterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@functions {

    private MiningScheduleModule _module;
    [Parameter] public WebMiningLedger Ledger { get; set; }
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    private ThdAuthUser _inspector;
    private RadzenDataGrid<WebMiningLedgerEntry> _ledgerGrid;

    private bool _isMergeAltsOption = true;
    private bool _isLedgerLoading = true;
    private int _countLedger;
    private int _tax = 50;
    private List<WebMiningLedgerEntry> _ledgerEntriesCache;
    private List<WebMiningLedgerEntry> _ledgerEntriesMergedCache;
    private List<WebMiningLedgerEntry> _ledgerList;

    async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));

    protected override async Task OnInitializedAsync()
    {
        var user = await Store.GetAsync<WebAuthUserData>("user");
        if (user == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        if (!await MiningScheduleModule.HasViewAccess(user))
        {
            Nav.NavigateTo("/", true);
            return;
        }
        _module = TickManager.GetModule<MiningScheduleModule>();
        if (_module == null || !SettingsManager.Settings.Config.ModuleMiningSchedule)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        _inspector = await DbHelper.GetAuthUser(user.Id, true);
        if (_inspector == null)
        {
            Nav.NavigateTo("/", true);
            return;
        }

        await Task.Factory.StartNew(async () =>
        {
            _ledgerEntriesCache = await _module.GetLedgerEntries(Ledger.StructureId, Ledger.FeederId, _tax);
            _ledgerEntriesMergedCache = await _module.MergeLedgerEntries(_ledgerEntriesCache);
            _isLedgerLoading = false;
        });

        await base.OnInitializedAsync();
    }

    private List<T> ApplyAjaxFilters<T>(IEnumerable<T> list, LoadDataArgs args, out int count)
    {
        var query = list.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);
        count = query.Count();

        if (!string.IsNullOrEmpty(args.OrderBy))
            query = query.OrderBy(args.OrderBy);
        return query.ToList();
    }

    private async Task LoadLedgerData(LoadDataArgs args)
    {
        while (_isLedgerLoading)
            await Task.Delay(100);

        _ledgerList = ApplyAjaxFilters(_isMergeAltsOption ? _ledgerEntriesMergedCache : _ledgerEntriesCache, args, out _countLedger);

        await InvokeAsync(StateHasChanged);
    }

    private async Task MergeAltsChanged(bool value)
    {
        await _ledgerGrid.Reload();
        await InvokeAsync(StateHasChanged);
    }

    private async void OnRender(DataGridRenderEventArgs<WebMiningLedgerEntry> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "NameFilter", Title = LM.Get("msLedgerColumnCharacter")});
            StateHasChanged();
        }
    }

    private async Task OnTaxChange(int value)
    {
        _isLedgerLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Factory.StartNew(async () =>
        {
            _ledgerEntriesCache = await _module.GetLedgerEntries(Ledger.StructureId, Ledger.FeederId, _tax);
            _ledgerEntriesMergedCache = await _module.MergeLedgerEntries(_ledgerEntriesCache);
            _isLedgerLoading = false;
            await _ledgerGrid.Reload();
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task OpenPayments()
    {
        await Modal.ShowModal<LedgerPayments>(Ledger, LM.Get("webMiningPaymentHeader", Ledger.StructureName), "Ledger", new Dictionary<string, object> { { "Entries", (_isMergeAltsOption ? _ledgerEntriesMergedCache : _ledgerEntriesCache).ToList() }, { "MergeAlts", _isMergeAltsOption }, {"ReprocessEff",_tax } });
    }
}
